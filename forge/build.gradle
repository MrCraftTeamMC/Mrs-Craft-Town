plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

def generatedResources = file("src/generated")

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }

    // Test DataGen
    runs {
        data {
            data()
            programArgs "--all", "--mod", "easiertravelcraft"
            programArgs "--output", generatedResources.absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${forge_version}"

    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Development QOL
    modLocalRuntime "curse.maven:lazy-dfu-forge-460819:3831644"
    // Curios API
    modCompileOnly "top.theillusivec4.curios:curios-forge:${rootProject.minecraft_version}-${curios_version}"

    // JEI
    // compile against the JEI API but do not include it at runtime
    modCompileOnly "mezz.jei:jei-${rootProject.minecraft_version}-common-api:${jei_version}"
    modCompileOnly "mezz.jei:jei-${rootProject.minecraft_version}-forge-api:${jei_version}"
    // at runtime, use the full JEI jar for Forge
    modRuntimeOnly "mezz.jei:jei-${rootProject.minecraft_version}-forge:${jei_version}"

    // REI
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-forge:${rei_version}"

    // EMI
    modCompileOnly "dev.emi:emi-forge:${emi_version}:api"
    modRuntimeOnly "dev.emi:emi-forge:${emi_version}"

    // MidnightLib
    modApi(include("maven.modrinth:midnightlib:${midnightlib_version}-forge"))
    // Cloth Config
    modApi "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"
    // Geckolib
    modImplementation "software.bernie.geckolib:geckolib-forge-1.19:${geckolib_version}"
    // BookShelf
    modApi "net.darkhax.bookshelf:Bookshelf-Forge-${rootProject.minecraft_version}:${bookshelf_version}"

    // Registrate
    modApi(include("com.tterrag.registrate:Registrate:${registrate_version}"))

    // Kiwi
    modApi "curse.maven:kiwi-303657:${kiwi_forge_fileId}"
    annotationProcessor "curse.maven:kiwi-303657:${kiwi_forge_fileId}"

    // Other Libs
    api(include("com.github.Fallen-Breath:conditional-mixin:${coditionalmixin_version}")) {
        exclude module: "fabric-loader"
    }
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

loom {
    forge {
        mixinConfig(
                "easiertravelcraft-common.mixins.json"
        )
    }
}

// 将数据生成的文件添加到 jar 中。
sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name + "-" + rootProject.minecraft_version
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            name = "LocalRepo"
            url = "file://${rootProject.buildDir}/repo"
        }
    }
}
