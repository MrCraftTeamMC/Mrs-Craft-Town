plugins {
    id "maven-publish" // Publish to Maven Repo
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1-SNAPSHOT" apply false
    //id "io.github.juuxel.loom-quiltflower" version "1.+" apply false 
    id 'io.github.juuxel.loom-vineflower' version '1.11.0' apply false // Quiltflower / Vineflower, a better decompiler
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
    id "de.undercouch.download" version "4.1.2" // Download Files
    id "io.github.pacifistmc.forgix" version "1.2.6" // Merge Fabric and Forge Jar 
}

repositories {
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
    maven {// saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
    }
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://cursemaven.com/" } // Forge Config API Port
    maven { url = "https://modmaven.dev/" }
    maven { url = "https://maven.blamejared.com/" } // JEI
    maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
    maven { url = "https://maven.parchmentmc.org/" } // Parchment mappings
    maven { url = "https://maven.quiltmc.org/repository/release/" } // Quilt Mappings
    maven { // Flywheel
        url = "https://maven.tterrag.com/"
        content {
            // need to be specific here due to version overlaps
            includeGroup("com.jozufozu.flywheel")
        }
    }
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven { url = "https://maven.terraformersmc.com/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = 'https://maven.ladysnake.org/releases' }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    maven {
        name = "SmartBrainLib (SBL) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
    }
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    mavenCentral()
    maven { url = "https://maven.fastmirror.net/" }
    maven { url = "https://crystal.app.lss233.com/repositories/minecraft/" }
    maven { url = "https://repository.hanbings.io/proxy/" }
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    //apply plugin: "io.github.juuxel.loom-quiltflower"
    apply plugin: "io.github.juuxel.loom-vineflower"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven {// saps.dev Maven (KubeJS and Rhino)
            url = "https://maven.saps.dev/minecraft"
        }
        maven { url = "https://api.modrinth.com/maven" } // LazyDFU
        maven { url = "https://cursemaven.com/" } // Forge Config API Port
        maven { url = "https://modmaven.dev/" }
        maven { url = "https://maven.blamejared.com/" } // JEI
        maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
        maven { url = "https://maven.parchmentmc.org/" } // Parchment mappings
        maven { url = "https://maven.quiltmc.org/repository/release/" } // Quilt Mappings
        maven { // Flywheel
            url = "https://maven.tterrag.com/"
            content {
                // need to be specific here due to version overlaps
                includeGroup("com.jozufozu.flywheel")
            }
        }
        maven { // Create Forge and Registrate Forge
            url = "https://maven.tterrag.com/"
            content {
                includeGroup("com.tterrag.registrate")
                includeGroup("com.simibubi.create")
            }
        }
        maven { url = "https://maven.terraformersmc.com/" } // Mod Menu
        maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
        maven { url = 'https://maven.ladysnake.org/releases' }
        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        }
        maven {
            name = "SmartBrainLib (SBL) Maven Repo"
            url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
        }
        maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
        maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
        maven { url = "https://maven.theillusivec4.top/" } // Curios
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
        maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
        mavenCentral()
        maven { url = "https://maven.fastmirror.net/" }
        maven { url = "https://crystal.app.lss233.com/repositories/minecraft/" }
        maven { url = "https://repository.hanbings.io/proxy/" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // layered mappings - Mojmap names, parchment and QM docs and parameters
        mappings loom.layered {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        }
        // see each subproject for dependencies.
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    group = rootProject.maven_group

    // Formats the mod version to include the loader, Minecraft version, and build number (if present)
    // example: 1.0.0+fabric-1.18.2-100
    String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
    version = "${rootProject.mod_version}+${project.name}-mc${rootProject.minecraft_version}" + (buildNumber != null ? "-${buildNumber}" : "")

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }

    machete {
        // disable machete locally for faster builds
        enabled = buildNumber != null
    }
}

// Customs Tasks
tasks.register("CleanBuilds") {
    group = "build"
    doFirst {
        println ":cleaning builds"
        def buildLibs = {
            p -> p.buildDir.toPath().resolve('libs')
        }
        def devLibs = {
            p -> p.buildDir.toPath().resolve('devlibs')
        }
        delete fileTree(buildLibs(rootProject)) {
            include '*'
        }
        delete fileTree(devLibs(rootProject)) {
            include '*'
        }
        subprojects {
            delete fileTree(buildLibs(project)) {
                include '*'
            }
            delete fileTree(devLibs(project)) {
                include '*'
            }
        }
        println ":clean builds SUCCESSFUL"
    }
}

tasks.register("CovertBuilds") {
    group = "build"
    dependsOn CleanBuilds
    dependsOn build
    subprojects {
        dependsOn project.tasks.named('build').get()
    }
    doFirst {
        println ":coverting builds"
        def buildLibs = {
            p -> p.buildDir.toPath().resolve('libs')
        }
        def devLibs = {
            p -> p.buildDir.toPath().resolve('devlibs')
        }
        delete fileTree(buildLibs(rootProject)) {
            include '*'
        }
        delete fileTree(devLibs(rootProject)) {
            include '*'
        }
        subprojects {
            copy {
                from(buildLibs(project)) {
                    include '*.jar'
                    exclude '*-dev.jar', '*-sources.jar', '*-javadoc.jar', '*-shadow.jar', '*-transformProductionFabric.jar', '*-transformProductionForge.jar', '*-transformProductionQuilt.jar', "*+common-mc${rootProject.minecraft_version}.jar","*+common-mc${rootProject.minecraft_version}-*.jar", "*+${rootProject.archives_base_name}-mc${rootProject.minecraft_version}-*.jar"
                }
                into buildLibs(rootProject)
                duplicatesStrategy DuplicatesStrategy.INCLUDE
            }
            copy {
                from(devLibs(project)) {
                    include '*.jar'
                    exclude "*+common-mc${rootProject.minecraft_version}.jar","*+common-mc${rootProject.minecraft_version}-*.jar", "*+${rootProject.archives_base_name}-mc${rootProject.minecraft_version}-*.jar"
                }
                into devLibs(rootProject)
                duplicatesStrategy DuplicatesStrategy.INCLUDE
            }
        }
        println ":covert builds SUCCESSFUL"
        println "The Artifacts should be in the build/libs folder"
    }
}
